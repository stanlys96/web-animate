{"ast":null,"code":"import { __rest } from 'tslib';\nimport { startAnimation } from '../../animation/utils/transitions.mjs';\nimport { setTarget } from './setters.mjs';\nimport { resolveVariant } from './variants.mjs';\nimport { isTransformProp } from '../html/utils/transform.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nfunction animateVisualElement(visualElement, definition) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  visualElement.notifyAnimationStart(definition);\n  let animation;\n  if (Array.isArray(definition)) {\n    const animations = definition.map(variant => animateVariant(visualElement, variant, options));\n    animation = Promise.all(animations);\n  } else if (typeof definition === \"string\") {\n    animation = animateVariant(visualElement, definition, options);\n  } else {\n    const resolvedDefinition = typeof definition === \"function\" ? resolveVariant(visualElement, definition, options.custom) : definition;\n    animation = animateTarget(visualElement, resolvedDefinition, options);\n  }\n  return animation.then(() => visualElement.notifyAnimationComplete(definition));\n}\nfunction animateVariant(visualElement, variant) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _a;\n  const resolved = resolveVariant(visualElement, variant, options.custom);\n  let {\n    transition = visualElement.getDefaultTransition() || {}\n  } = resolved || {};\n  if (options.transitionOverride) {\n    transition = options.transitionOverride;\n  }\n  /**\n   * If we have a variant, create a callback that runs it as an animation.\n   * Otherwise, we resolve a Promise immediately for a composable no-op.\n   */\n  const getAnimation = resolved ? () => animateTarget(visualElement, resolved, options) : () => Promise.resolve();\n  /**\n   * If we have children, create a callback that runs all their animations.\n   * Otherwise, we resolve a Promise immediately for a composable no-op.\n   */\n  const getChildAnimations = ((_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.size) ? function () {\n    let forwardDelay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const {\n      delayChildren = 0,\n      staggerChildren,\n      staggerDirection\n    } = transition;\n    return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n  } : () => Promise.resolve();\n  /**\n   * If the transition explicitly defines a \"when\" option, we need to resolve either\n   * this animation or all children animations before playing the other.\n   */\n  const {\n    when\n  } = transition;\n  if (when) {\n    const [first, last] = when === \"beforeChildren\" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];\n    return first().then(last);\n  } else {\n    return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n  }\n}\n/**\n * @internal\n */\nfunction animateTarget(visualElement, definition) {\n  let {\n    delay = 0,\n    transitionOverride,\n    type\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _a;\n  let _b = visualElement.makeTargetAnimatable(definition),\n    {\n      transition = visualElement.getDefaultTransition(),\n      transitionEnd\n    } = _b,\n    target = __rest(_b, [\"transition\", \"transitionEnd\"]);\n  const willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  const animations = [];\n  const animationTypeState = type && ((_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.getState()[type]);\n  for (const key in target) {\n    const value = visualElement.getValue(key);\n    const valueTarget = target[key];\n    if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n    let valueTransition = Object.assign({\n      delay\n    }, transition);\n    /**\n     * Make animation instant if this is a transform prop and we should reduce motion.\n     */\n    if (visualElement.shouldReduceMotion && isTransformProp(key)) {\n      valueTransition = Object.assign(Object.assign({}, valueTransition), {\n        type: false,\n        delay: 0\n      });\n    }\n    let animation = startAnimation(key, value, valueTarget, valueTransition);\n    if (isWillChangeMotionValue(willChange)) {\n      willChange.add(key);\n      animation = animation.then(() => willChange.remove(key));\n    }\n    animations.push(animation);\n  }\n  return Promise.all(animations).then(() => {\n    transitionEnd && setTarget(visualElement, transitionEnd);\n  });\n}\nfunction animateChildren(visualElement, variant) {\n  let delayChildren = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let staggerChildren = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let staggerDirection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  let options = arguments.length > 5 ? arguments[5] : undefined;\n  const animations = [];\n  const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n  const generateStaggerDuration = staggerDirection === 1 ? function () {\n    let i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return i * staggerChildren;\n  } : function () {\n    let i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return maxStaggerDuration - i * staggerChildren;\n  };\n  Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i) => {\n    animations.push(animateVariant(child, variant, Object.assign(Object.assign({}, options), {\n      delay: delayChildren + generateStaggerDuration(i)\n    })).then(() => child.notifyAnimationComplete(variant)));\n  });\n  return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n  visualElement.forEachValue(value => value.stop());\n}\nfunction sortByTreeOrder(a, b) {\n  return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation(_ref, key) {\n  let {\n    protectedKeys,\n    needsAnimating\n  } = _ref;\n  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\nexport { animateVisualElement, sortByTreeOrder, stopAnimation };","map":{"version":3,"names":["__rest","startAnimation","setTarget","resolveVariant","isTransformProp","isWillChangeMotionValue","animateVisualElement","visualElement","definition","options","arguments","length","undefined","notifyAnimationStart","animation","Array","isArray","animations","map","variant","animateVariant","Promise","all","resolvedDefinition","custom","animateTarget","then","notifyAnimationComplete","_a","resolved","transition","getDefaultTransition","transitionOverride","getAnimation","resolve","getChildAnimations","variantChildren","size","forwardDelay","delayChildren","staggerChildren","staggerDirection","animateChildren","when","first","last","delay","type","_b","makeTargetAnimatable","transitionEnd","target","willChange","getValue","animationTypeState","animationState","getState","key","value","valueTarget","shouldBlockAnimation","valueTransition","Object","assign","shouldReduceMotion","add","remove","push","maxStaggerDuration","generateStaggerDuration","i","from","sort","sortByTreeOrder","forEach","child","stopAnimation","forEachValue","stop","a","b","sortNodePosition","_ref","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty"],"sources":["/Users/stanly_s/Documents/yocia/node_modules/framer-motion/dist/es/render/utils/animation.mjs"],"sourcesContent":["import { __rest } from 'tslib';\nimport { startAnimation } from '../../animation/utils/transitions.mjs';\nimport { setTarget } from './setters.mjs';\nimport { resolveVariant } from './variants.mjs';\nimport { isTransformProp } from '../html/utils/transform.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notifyAnimationStart(definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = animateTarget(visualElement, resolvedDefinition, options);\n    }\n    return animation.then(() => visualElement.notifyAnimationComplete(definition));\n}\nfunction animateVariant(visualElement, variant, options = {}) {\n    var _a;\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => animateTarget(visualElement, resolved, options)\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = ((_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.size)\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(last);\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\n/**\n * @internal\n */\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    var _a;\n    let _b = visualElement.makeTargetAnimatable(definition), { transition = visualElement.getDefaultTransition(), transitionEnd } = _b, target = __rest(_b, [\"transition\", \"transitionEnd\"]);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type && ((_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.getState()[type]);\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        let valueTransition = Object.assign({ delay }, transition);\n        /**\n         * Make animation instant if this is a transform prop and we should reduce motion.\n         */\n        if (visualElement.shouldReduceMotion && isTransformProp(key)) {\n            valueTransition = Object.assign(Object.assign({}, valueTransition), { type: false, delay: 0 });\n        }\n        let animation = startAnimation(key, value, valueTarget, valueTransition);\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation = animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    return Promise.all(animations).then(() => {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        animations.push(animateVariant(child, variant, Object.assign(Object.assign({}, options), { delay: delayChildren + generateStaggerDuration(i) })).then(() => child.notifyAnimationComplete(variant)));\n    });\n    return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n    visualElement.forEachValue((value) => value.stop());\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\n\nexport { animateVisualElement, sortByTreeOrder, stopAnimation };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}