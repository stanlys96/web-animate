{"ast":null,"code":"import { __rest } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.mjs';\nconst visualElement = _ref => {\n  let {\n    treeType = \"\",\n    build,\n    getBaseTarget,\n    makeTargetAnimatable,\n    measureViewportBox,\n    render: renderInstance,\n    readValueFromInstance,\n    removeValueFromRenderState,\n    sortNodePosition,\n    scrapeMotionValuesFromProps\n  } = _ref;\n  return function (_ref2) {\n    let {\n      parent,\n      props,\n      presenceId,\n      blockInitialAnimation,\n      visualState,\n      shouldReduceMotion\n    } = _ref2;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let isMounted = false;\n    const {\n      latestValues,\n      renderState\n    } = visualState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n    let instance;\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender\n     */\n    const lifecycles = createLifecycles();\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n    const values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n    const valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n    let prevMotionValues = {};\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n    const baseTarget = Object.assign({}, latestValues);\n    // Internal methods ========================\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n    let removeFromVariantTree;\n    /**\n     * Render the element with the latest styles outside of the React\n     * render lifecycle\n     */\n    function render() {\n      if (!instance || !isMounted) return;\n      triggerBuild();\n      renderInstance(instance, renderState, props.style, element.projection);\n    }\n    function triggerBuild() {\n      build(element, renderState, latestValues, options, props);\n    }\n    function update() {\n      lifecycles.notifyUpdate(latestValues);\n    }\n    /**\n     *\n     */\n    function bindToMotionValue(key, value) {\n      const removeOnChange = value.onChange(latestValue => {\n        latestValues[key] = latestValue;\n        props.onUpdate && sync.update(update, false, true);\n      });\n      const removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n      valueSubscriptions.set(key, () => {\n        removeOnChange();\n        removeOnRenderRequest();\n      });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n    const _a = scrapeMotionValuesFromProps(props),\n      {\n        willChange\n      } = _a,\n      initialMotionValues = __rest(_a, [\"willChange\"]);\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n    const isControllingVariants = checkIfControllingVariants(props);\n    const isVariantNode = checkIfVariantNode(props);\n    const element = Object.assign(Object.assign({\n      treeType,\n      /**\n       * This is a mirror of the internal instance prop, which keeps\n       * VisualElement type-compatible with React's RefObject.\n       */\n      current: null,\n      /**\n       * The depth of this visual element within the visual element tree.\n       */\n      depth: parent ? parent.depth + 1 : 0,\n      parent,\n      children: new Set(),\n      /**\n       *\n       */\n      presenceId,\n      shouldReduceMotion,\n      /**\n       * If this component is part of the variant tree, it should track\n       * any children that are also part of the tree. This is essentially\n       * a shadow tree to simplify logic around how to stagger over children.\n       */\n      variantChildren: isVariantNode ? new Set() : undefined,\n      /**\n       * Whether this instance is visible. This can be changed imperatively\n       * by the projection tree, is analogous to CSS's visibility in that\n       * hidden elements should take up layout, and needs enacting by the configured\n       * render function.\n       */\n      isVisible: undefined,\n      /**\n       * Normally, if a component is controlled by a parent's variants, it can\n       * rely on that ancestor to trigger animations further down the tree.\n       * However, if a component is created after its parent is mounted, the parent\n       * won't trigger that mount animation so the child needs to.\n       *\n       * TODO: This might be better replaced with a method isParentMounted\n       */\n      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n      /**\n       * This can be set by AnimatePresence to force components that mount\n       * at the same time as it to mount as if they have initial={false} set.\n       */\n      blockInitialAnimation,\n      /**\n       * Determine whether this component has mounted yet. This is mostly used\n       * by variant children to determine whether they need to trigger their\n       * own animations on mount.\n       */\n      isMounted: () => Boolean(instance),\n      mount(newInstance) {\n        isMounted = true;\n        instance = element.current = newInstance;\n        if (element.projection) {\n          element.projection.mount(newInstance);\n        }\n        if (isVariantNode && parent && !isControllingVariants) {\n          removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n        }\n        values.forEach((value, key) => bindToMotionValue(key, value));\n        parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n        element.setProps(props);\n      },\n      /**\n       *\n       */\n      unmount() {\n        var _a;\n        (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n        cancelSync.update(update);\n        cancelSync.render(render);\n        valueSubscriptions.forEach(remove => remove());\n        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n        parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n        lifecycles.clearAllListeners();\n        instance = undefined;\n        isMounted = false;\n      },\n      /**\n       * Add a child visual element to our set of children.\n       */\n      addVariantChild(child) {\n        var _a;\n        const closestVariantNode = element.getClosestVariantNode();\n        if (closestVariantNode) {\n          (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n          return () => closestVariantNode.variantChildren.delete(child);\n        }\n      },\n      sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!sortNodePosition || treeType !== other.treeType) return 0;\n        return sortNodePosition(element.getInstance(), other.getInstance());\n      },\n      /**\n       * Returns the closest variant node in the tree starting from\n       * this visual element.\n       */\n      getClosestVariantNode: () => isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode(),\n      /**\n       * Expose the latest layoutId prop.\n       */\n      getLayoutId: () => props.layoutId,\n      /**\n       * Returns the current instance.\n       */\n      getInstance: () => instance,\n      /**\n       * Get/set the latest static values.\n       */\n      getStaticValue: key => latestValues[key],\n      setStaticValue: (key, value) => latestValues[key] = value,\n      /**\n       * Returns the latest motion value state. Currently only used to take\n       * a snapshot of the visual element - perhaps this can return the whole\n       * visual state\n       */\n      getLatestValues: () => latestValues,\n      /**\n       * Set the visiblity of the visual element. If it's changed, schedule\n       * a render to reflect these changes.\n       */\n      setVisibility(visibility) {\n        if (element.isVisible === visibility) return;\n        element.isVisible = visibility;\n        element.scheduleRender();\n      },\n      /**\n       * Make a target animatable by Popmotion. For instance, if we're\n       * trying to animate width from 100px to 100vw we need to measure 100vw\n       * in pixels to determine what we really need to animate to. This is also\n       * pluggable to support Framer's custom value types like Color,\n       * and CSS variables.\n       */\n      makeTargetAnimatable(target) {\n        let canMutate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return makeTargetAnimatable(element, target, props, canMutate);\n      },\n      /**\n       * Measure the current viewport box with or without transforms.\n       * Only measures axis-aligned boxes, rotate and skew must be manually\n       * removed with a re-render to work.\n       */\n      measureViewportBox() {\n        return measureViewportBox(instance, props);\n      },\n      // Motion values ========================\n      /**\n       * Add a motion value and bind it to this visual element.\n       */\n      addValue(key, value) {\n        // Remove existing value if it exists\n        if (element.hasValue(key)) element.removeValue(key);\n        values.set(key, value);\n        latestValues[key] = value.get();\n        bindToMotionValue(key, value);\n      },\n      /**\n       * Remove a motion value and unbind any active subscriptions.\n       */\n      removeValue(key) {\n        var _a;\n        values.delete(key);\n        (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        valueSubscriptions.delete(key);\n        delete latestValues[key];\n        removeValueFromRenderState(key, renderState);\n      },\n      /**\n       * Check whether we have a motion value for this key\n       */\n      hasValue: key => values.has(key),\n      /**\n       * Get a motion value for this key. If called with a default\n       * value, we'll create one if none exists.\n       */\n      getValue(key, defaultValue) {\n        let value = values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n          value = motionValue(defaultValue);\n          element.addValue(key, value);\n        }\n        return value;\n      },\n      /**\n       * Iterate over our motion values.\n       */\n      forEachValue: callback => values.forEach(callback),\n      /**\n       * If we're trying to animate to a previously unencountered value,\n       * we need to check for it in our state and as a last resort read it\n       * directly from the instance (which might have performance implications).\n       */\n      readValue: key => {\n        var _a;\n        return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options);\n      },\n      /**\n       * Set the base target to later animate back to. This is currently\n       * only hydrated on creation and when we first read a value.\n       */\n      setBaseTarget(key, value) {\n        baseTarget[key] = value;\n      },\n      /**\n       * Find the base target for a value thats been removed from all animation\n       * props.\n       */\n      getBaseTarget(key) {\n        if (getBaseTarget) {\n          const target = getBaseTarget(props, key);\n          if (target !== undefined && !isMotionValue(target)) return target;\n        }\n        return baseTarget[key];\n      }\n    }, lifecycles), {\n      /**\n       * Build the renderer state based on the latest visual state.\n       */\n      build() {\n        triggerBuild();\n        return renderState;\n      },\n      /**\n       * Schedule a render on the next animation frame.\n       */\n      scheduleRender() {\n        sync.render(render, false, true);\n      },\n      /**\n       * Synchronously fire render. It's prefered that we batch renders but\n       * in many circumstances, like layout measurement, we need to run this\n       * synchronously. However in those instances other measures should be taken\n       * to batch reads/writes.\n       */\n      syncRender: render,\n      /**\n       * Update the provided props. Ensure any newly-added motion values are\n       * added to our map, old ones removed, and listeners updated.\n       */\n      setProps(newProps) {\n        if (newProps.transformTemplate || props.transformTemplate) {\n          element.scheduleRender();\n        }\n        props = newProps;\n        lifecycles.updatePropListeners(newProps);\n        prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n      },\n      getProps: () => props,\n      // Variants ==============================\n      /**\n       * Returns the variant definition with a given name.\n       */\n      getVariant: name => {\n        var _a;\n        return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n      },\n      /**\n       * Returns the defined default transition on this component.\n       */\n      getDefaultTransition: () => props.transition,\n      getTransformPagePoint: () => {\n        return props.transformPagePoint;\n      },\n      /**\n       * Used by child variant nodes to get the closest ancestor variant props.\n       */\n      getVariantContext() {\n        let startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n        if (!isControllingVariants) {\n          const context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n          if (props.initial !== undefined) {\n            context.initial = props.initial;\n          }\n          return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n          const name = variantProps[i];\n          const prop = props[name];\n          if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n          }\n        }\n        return context;\n      }\n    });\n    return element;\n  };\n};\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\nexport { visualElement };","map":{"version":3,"names":["__rest","sync","cancelSync","motionValue","isWillChangeMotionValue","isMotionValue","variantPriorityOrder","createLifecycles","updateMotionValuesFromProps","checkIfControllingVariants","checkIfVariantNode","isVariantLabel","visualElement","_ref","treeType","build","getBaseTarget","makeTargetAnimatable","measureViewportBox","render","renderInstance","readValueFromInstance","removeValueFromRenderState","sortNodePosition","scrapeMotionValuesFromProps","_ref2","parent","props","presenceId","blockInitialAnimation","visualState","shouldReduceMotion","options","arguments","length","undefined","isMounted","latestValues","renderState","instance","lifecycles","values","Map","valueSubscriptions","prevMotionValues","baseTarget","Object","assign","removeFromVariantTree","triggerBuild","style","element","projection","update","notifyUpdate","bindToMotionValue","key","value","removeOnChange","onChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","scheduleRender","set","_a","willChange","initialMotionValues","add","isControllingVariants","isVariantNode","current","depth","children","Set","variantChildren","isVisible","manuallyAnimateOnMount","Boolean","mount","newInstance","addVariantChild","forEach","setProps","unmount","remove","delete","clearAllListeners","child","closestVariantNode","getClosestVariantNode","other","getInstance","getLayoutId","layoutId","getStaticValue","setStaticValue","getLatestValues","setVisibility","visibility","target","canMutate","addValue","hasValue","removeValue","get","has","getValue","defaultValue","forEachValue","callback","readValue","setBaseTarget","syncRender","newProps","transformTemplate","updatePropListeners","getProps","getVariant","name","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getVariantContext","startAtParent","context","initial","i","numVariantProps","variantProps","prop"],"sources":["/Users/stanly_s/Documents/yocia/node_modules/framer-motion/dist/es/render/index.mjs"],"sourcesContent":["import { __rest } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.mjs';\n\nconst visualElement = ({ treeType = \"\", build, getBaseTarget, makeTargetAnimatable, measureViewportBox, render: renderInstance, readValueFromInstance, removeValueFromRenderState, sortNodePosition, scrapeMotionValuesFromProps, }) => ({ parent, props, presenceId, blockInitialAnimation, visualState, shouldReduceMotion, }, options = {}) => {\n    let isMounted = false;\n    const { latestValues, renderState } = visualState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n    let instance;\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender\n     */\n    const lifecycles = createLifecycles();\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n    const values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n    const valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n    let prevMotionValues = {};\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n    const baseTarget = Object.assign({}, latestValues);\n    // Internal methods ========================\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n    let removeFromVariantTree;\n    /**\n     * Render the element with the latest styles outside of the React\n     * render lifecycle\n     */\n    function render() {\n        if (!instance || !isMounted)\n            return;\n        triggerBuild();\n        renderInstance(instance, renderState, props.style, element.projection);\n    }\n    function triggerBuild() {\n        build(element, renderState, latestValues, options, props);\n    }\n    function update() {\n        lifecycles.notifyUpdate(latestValues);\n    }\n    /**\n     *\n     */\n    function bindToMotionValue(key, value) {\n        const removeOnChange = value.onChange((latestValue) => {\n            latestValues[key] = latestValue;\n            props.onUpdate && sync.update(update, false, true);\n        });\n        const removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n        valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n    const _a = scrapeMotionValuesFromProps(props), { willChange } = _a, initialMotionValues = __rest(_a, [\"willChange\"]);\n    for (const key in initialMotionValues) {\n        const value = initialMotionValues[key];\n        if (latestValues[key] !== undefined && isMotionValue(value)) {\n            value.set(latestValues[key], false);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n        }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n    const isControllingVariants = checkIfControllingVariants(props);\n    const isVariantNode = checkIfVariantNode(props);\n    const element = Object.assign(Object.assign({ treeType, \n        /**\n         * This is a mirror of the internal instance prop, which keeps\n         * VisualElement type-compatible with React's RefObject.\n         */\n        current: null, \n        /**\n         * The depth of this visual element within the visual element tree.\n         */\n        depth: parent ? parent.depth + 1 : 0, parent, children: new Set(), \n        /**\n         *\n         */\n        presenceId,\n        shouldReduceMotion, \n        /**\n         * If this component is part of the variant tree, it should track\n         * any children that are also part of the tree. This is essentially\n         * a shadow tree to simplify logic around how to stagger over children.\n         */\n        variantChildren: isVariantNode ? new Set() : undefined, \n        /**\n         * Whether this instance is visible. This can be changed imperatively\n         * by the projection tree, is analogous to CSS's visibility in that\n         * hidden elements should take up layout, and needs enacting by the configured\n         * render function.\n         */\n        isVisible: undefined, \n        /**\n         * Normally, if a component is controlled by a parent's variants, it can\n         * rely on that ancestor to trigger animations further down the tree.\n         * However, if a component is created after its parent is mounted, the parent\n         * won't trigger that mount animation so the child needs to.\n         *\n         * TODO: This might be better replaced with a method isParentMounted\n         */\n        manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()), \n        /**\n         * This can be set by AnimatePresence to force components that mount\n         * at the same time as it to mount as if they have initial={false} set.\n         */\n        blockInitialAnimation, \n        /**\n         * Determine whether this component has mounted yet. This is mostly used\n         * by variant children to determine whether they need to trigger their\n         * own animations on mount.\n         */\n        isMounted: () => Boolean(instance), mount(newInstance) {\n            isMounted = true;\n            instance = element.current = newInstance;\n            if (element.projection) {\n                element.projection.mount(newInstance);\n            }\n            if (isVariantNode && parent && !isControllingVariants) {\n                removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n            }\n            values.forEach((value, key) => bindToMotionValue(key, value));\n            parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n            element.setProps(props);\n        },\n        /**\n         *\n         */\n        unmount() {\n            var _a;\n            (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n            cancelSync.update(update);\n            cancelSync.render(render);\n            valueSubscriptions.forEach((remove) => remove());\n            removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n            parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n            lifecycles.clearAllListeners();\n            instance = undefined;\n            isMounted = false;\n        },\n        /**\n         * Add a child visual element to our set of children.\n         */\n        addVariantChild(child) {\n            var _a;\n            const closestVariantNode = element.getClosestVariantNode();\n            if (closestVariantNode) {\n                (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                return () => closestVariantNode.variantChildren.delete(child);\n            }\n        },\n        sortNodePosition(other) {\n            /**\n             * If these nodes aren't even of the same type we can't compare their depth.\n             */\n            if (!sortNodePosition || treeType !== other.treeType)\n                return 0;\n            return sortNodePosition(element.getInstance(), other.getInstance());\n        }, \n        /**\n         * Returns the closest variant node in the tree starting from\n         * this visual element.\n         */\n        getClosestVariantNode: () => isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode(), \n        /**\n         * Expose the latest layoutId prop.\n         */\n        getLayoutId: () => props.layoutId, \n        /**\n         * Returns the current instance.\n         */\n        getInstance: () => instance, \n        /**\n         * Get/set the latest static values.\n         */\n        getStaticValue: (key) => latestValues[key], setStaticValue: (key, value) => (latestValues[key] = value), \n        /**\n         * Returns the latest motion value state. Currently only used to take\n         * a snapshot of the visual element - perhaps this can return the whole\n         * visual state\n         */\n        getLatestValues: () => latestValues, \n        /**\n         * Set the visiblity of the visual element. If it's changed, schedule\n         * a render to reflect these changes.\n         */\n        setVisibility(visibility) {\n            if (element.isVisible === visibility)\n                return;\n            element.isVisible = visibility;\n            element.scheduleRender();\n        },\n        /**\n         * Make a target animatable by Popmotion. For instance, if we're\n         * trying to animate width from 100px to 100vw we need to measure 100vw\n         * in pixels to determine what we really need to animate to. This is also\n         * pluggable to support Framer's custom value types like Color,\n         * and CSS variables.\n         */\n        makeTargetAnimatable(target, canMutate = true) {\n            return makeTargetAnimatable(element, target, props, canMutate);\n        },\n        /**\n         * Measure the current viewport box with or without transforms.\n         * Only measures axis-aligned boxes, rotate and skew must be manually\n         * removed with a re-render to work.\n         */\n        measureViewportBox() {\n            return measureViewportBox(instance, props);\n        },\n        // Motion values ========================\n        /**\n         * Add a motion value and bind it to this visual element.\n         */\n        addValue(key, value) {\n            // Remove existing value if it exists\n            if (element.hasValue(key))\n                element.removeValue(key);\n            values.set(key, value);\n            latestValues[key] = value.get();\n            bindToMotionValue(key, value);\n        },\n        /**\n         * Remove a motion value and unbind any active subscriptions.\n         */\n        removeValue(key) {\n            var _a;\n            values.delete(key);\n            (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n            valueSubscriptions.delete(key);\n            delete latestValues[key];\n            removeValueFromRenderState(key, renderState);\n        }, \n        /**\n         * Check whether we have a motion value for this key\n         */\n        hasValue: (key) => values.has(key), \n        /**\n         * Get a motion value for this key. If called with a default\n         * value, we'll create one if none exists.\n         */\n        getValue(key, defaultValue) {\n            let value = values.get(key);\n            if (value === undefined && defaultValue !== undefined) {\n                value = motionValue(defaultValue);\n                element.addValue(key, value);\n            }\n            return value;\n        }, \n        /**\n         * Iterate over our motion values.\n         */\n        forEachValue: (callback) => values.forEach(callback), \n        /**\n         * If we're trying to animate to a previously unencountered value,\n         * we need to check for it in our state and as a last resort read it\n         * directly from the instance (which might have performance implications).\n         */\n        readValue: (key) => {\n            var _a;\n            return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options);\n        }, \n        /**\n         * Set the base target to later animate back to. This is currently\n         * only hydrated on creation and when we first read a value.\n         */\n        setBaseTarget(key, value) {\n            baseTarget[key] = value;\n        },\n        /**\n         * Find the base target for a value thats been removed from all animation\n         * props.\n         */\n        getBaseTarget(key) {\n            if (getBaseTarget) {\n                const target = getBaseTarget(props, key);\n                if (target !== undefined && !isMotionValue(target))\n                    return target;\n            }\n            return baseTarget[key];\n        } }, lifecycles), { \n        /**\n         * Build the renderer state based on the latest visual state.\n         */\n        build() {\n            triggerBuild();\n            return renderState;\n        },\n        /**\n         * Schedule a render on the next animation frame.\n         */\n        scheduleRender() {\n            sync.render(render, false, true);\n        }, \n        /**\n         * Synchronously fire render. It's prefered that we batch renders but\n         * in many circumstances, like layout measurement, we need to run this\n         * synchronously. However in those instances other measures should be taken\n         * to batch reads/writes.\n         */\n        syncRender: render, \n        /**\n         * Update the provided props. Ensure any newly-added motion values are\n         * added to our map, old ones removed, and listeners updated.\n         */\n        setProps(newProps) {\n            if (newProps.transformTemplate || props.transformTemplate) {\n                element.scheduleRender();\n            }\n            props = newProps;\n            lifecycles.updatePropListeners(newProps);\n            prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n        }, getProps: () => props, \n        // Variants ==============================\n        /**\n         * Returns the variant definition with a given name.\n         */\n        getVariant: (name) => { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; }, \n        /**\n         * Returns the defined default transition on this component.\n         */\n        getDefaultTransition: () => props.transition, getTransformPagePoint: () => {\n            return props.transformPagePoint;\n        }, \n        /**\n         * Used by child variant nodes to get the closest ancestor variant props.\n         */\n        getVariantContext(startAtParent = false) {\n            if (startAtParent)\n                return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n            if (!isControllingVariants) {\n                const context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                if (props.initial !== undefined) {\n                    context.initial = props.initial;\n                }\n                return context;\n            }\n            const context = {};\n            for (let i = 0; i < numVariantProps; i++) {\n                const name = variantProps[i];\n                const prop = props[name];\n                if (isVariantLabel(prop) || prop === false) {\n                    context[name] = prop;\n                }\n            }\n            return context;\n        } });\n    return element;\n};\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\n\nexport { visualElement };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}