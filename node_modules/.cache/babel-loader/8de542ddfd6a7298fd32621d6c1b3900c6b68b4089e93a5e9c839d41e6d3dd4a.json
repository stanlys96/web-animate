{"ast":null,"code":"import sync from 'framesync';\nimport React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nclass MeasureLayoutWithContext extends React__default.Component {\n  /**\n   * This only mounts projection nodes for components that\n   * need measuring, we might want to do it for all components\n   * in order to incorporate transforms\n   */\n  componentDidMount() {\n    const {\n      visualElement,\n      layoutGroup,\n      switchLayoutGroup,\n      layoutId\n    } = this.props;\n    const {\n      projection\n    } = visualElement;\n    addScaleCorrector(defaultScaleCorrectors);\n    if (projection) {\n      if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group) layoutGroup.group.add(projection);\n      if ((switchLayoutGroup === null || switchLayoutGroup === void 0 ? void 0 : switchLayoutGroup.register) && layoutId) {\n        switchLayoutGroup.register(projection);\n      }\n      projection.root.didUpdate();\n      projection.addEventListener(\"animationComplete\", () => {\n        this.safeToRemove();\n      });\n      projection.setOptions(Object.assign(Object.assign({}, projection.options), {\n        onExitComplete: () => this.safeToRemove()\n      }));\n    }\n    globalProjectionState.hasEverUpdated = true;\n  }\n  getSnapshotBeforeUpdate(prevProps) {\n    const {\n      layoutDependency,\n      visualElement,\n      drag,\n      isPresent\n    } = this.props;\n    const projection = visualElement.projection;\n    if (!projection) return null;\n    /**\n     * TODO: We use this data in relegate to determine whether to\n     * promote a previous element. There's no guarantee its presence data\n     * will have updated by this point - if a bug like this arises it will\n     * have to be that we markForRelegation and then find a new lead some other way,\n     * perhaps in didUpdate\n     */\n    projection.isPresent = isPresent;\n    if (drag || prevProps.layoutDependency !== layoutDependency || layoutDependency === undefined) {\n      projection.willUpdate();\n    } else {\n      this.safeToRemove();\n    }\n    if (prevProps.isPresent !== isPresent) {\n      if (isPresent) {\n        projection.promote();\n      } else if (!projection.relegate()) {\n        /**\n         * If there's another stack member taking over from this one,\n         * it's in charge of the exit animation and therefore should\n         * be in charge of the safe to remove. Otherwise we call it here.\n         */\n        sync.postRender(() => {\n          var _a;\n          if (!((_a = projection.getStack()) === null || _a === void 0 ? void 0 : _a.members.length)) {\n            this.safeToRemove();\n          }\n        });\n      }\n    }\n    return null;\n  }\n  componentDidUpdate() {\n    const {\n      projection\n    } = this.props.visualElement;\n    if (projection) {\n      projection.root.didUpdate();\n      if (!projection.currentAnimation && projection.isLead()) {\n        this.safeToRemove();\n      }\n    }\n  }\n  componentWillUnmount() {\n    const {\n      visualElement,\n      layoutGroup,\n      switchLayoutGroup: promoteContext\n    } = this.props;\n    const {\n      projection\n    } = visualElement;\n    if (projection) {\n      projection.scheduleCheckAfterUnmount();\n      if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group) layoutGroup.group.remove(projection);\n      if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister) promoteContext.deregister(projection);\n    }\n  }\n  safeToRemove() {\n    const {\n      safeToRemove\n    } = this.props;\n    safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();\n  }\n  render() {\n    return null;\n  }\n}\nfunction MeasureLayout(props) {\n  const [isPresent, safeToRemove] = usePresence();\n  const layoutGroup = useContext(LayoutGroupContext);\n  return React__default.createElement(MeasureLayoutWithContext, Object.assign({}, props, {\n    layoutGroup: layoutGroup,\n    switchLayoutGroup: useContext(SwitchLayoutGroupContext),\n    isPresent: isPresent,\n    safeToRemove: safeToRemove\n  }));\n}\nconst defaultScaleCorrectors = {\n  borderRadius: Object.assign(Object.assign({}, correctBorderRadius), {\n    applyTo: [\"borderTopLeftRadius\", \"borderTopRightRadius\", \"borderBottomLeftRadius\", \"borderBottomRightRadius\"]\n  }),\n  borderTopLeftRadius: correctBorderRadius,\n  borderTopRightRadius: correctBorderRadius,\n  borderBottomLeftRadius: correctBorderRadius,\n  borderBottomRightRadius: correctBorderRadius,\n  boxShadow: correctBoxShadow\n};\nexport { MeasureLayout };","map":{"version":3,"names":["sync","React__default","useContext","usePresence","LayoutGroupContext","SwitchLayoutGroupContext","globalProjectionState","correctBorderRadius","correctBoxShadow","addScaleCorrector","MeasureLayoutWithContext","Component","componentDidMount","visualElement","layoutGroup","switchLayoutGroup","layoutId","props","projection","defaultScaleCorrectors","group","add","register","root","didUpdate","addEventListener","safeToRemove","setOptions","Object","assign","options","onExitComplete","hasEverUpdated","getSnapshotBeforeUpdate","prevProps","layoutDependency","drag","isPresent","undefined","willUpdate","promote","relegate","postRender","_a","getStack","members","length","componentDidUpdate","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","remove","deregister","render","MeasureLayout","createElement","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow"],"sources":["/Users/stanly_s/Documents/yocia/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs"],"sourcesContent":["import sync from 'framesync';\nimport React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if ((switchLayoutGroup === null || switchLayoutGroup === void 0 ? void 0 : switchLayoutGroup.register) && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions(Object.assign(Object.assign({}, projection.options), { onExitComplete: () => this.safeToRemove() }));\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                sync.postRender(() => {\n                    var _a;\n                    if (!((_a = projection.getStack()) === null || _a === void 0 ? void 0 : _a.members.length)) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            if (!projection.currentAnimation && projection.isLead()) {\n                this.safeToRemove();\n            }\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, Object.assign({}, props, { layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove })));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: Object.assign(Object.assign({}, correctBorderRadius), { applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ] }),\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}