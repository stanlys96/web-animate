{"ast":null,"code":"import * as React from 'react';\nimport { forwardRef, useContext } from 'react';\nimport { useFeatures } from './features/use-features.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures, featureDefinitions } from './features/definitions.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { useProjectionId } from '../projection/node/id.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { useProjection } from './features/use-projection.mjs';\nimport { VisualElementHandler } from './utils/VisualElementHandler.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent(_ref) {\n  let {\n    preloadedFeatures,\n    createVisualElement,\n    projectionNodeConstructor,\n    useRender,\n    useVisualState,\n    Component\n  } = _ref;\n  preloadedFeatures && loadFeatures(preloadedFeatures);\n  function MotionComponent(props, externalRef) {\n    const layoutId = useLayoutId(props);\n    props = Object.assign(Object.assign({}, props), {\n      layoutId\n    });\n    /**\n     * If we're rendering in a static environment, we only visually update the component\n     * as a result of a React-rerender rather than interactions or animations. This\n     * means we don't need to load additional memory structures like VisualElement,\n     * or any gesture/animation features.\n     */\n    const config = useContext(MotionConfigContext);\n    let features = null;\n    const context = useCreateMotionContext(props);\n    /**\n     * Create a unique projection ID for this component. If a new component is added\n     * during a layout animation we'll use this to query the DOM and hydrate its ref early, allowing\n     * us to measure it as soon as any layout effect flushes pending layout animations.\n     *\n     * Performance note: It'd be better not to have to search the DOM for these elements.\n     * For newly-entering components it could be enough to only correct treeScale, in which\n     * case we could mount in a scale-correction mode. This wouldn't be enough for\n     * shared element transitions however. Perhaps for those we could revert to a root node\n     * that gets forceRendered and layout animations are triggered on its layout effect.\n     */\n    const projectionId = config.isStatic ? undefined : useProjectionId();\n    /**\n     *\n     */\n    const visualState = useVisualState(props, config.isStatic);\n    if (!config.isStatic && isBrowser) {\n      /**\n       * Create a VisualElement for this component. A VisualElement provides a common\n       * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n       * providing a way of rendering to these APIs outside of the React render loop\n       * for more performant animations and interactions\n       */\n      context.visualElement = useVisualElement(Component, visualState, Object.assign(Object.assign({}, config), props), createVisualElement);\n      useProjection(projectionId, props, context.visualElement, projectionNodeConstructor || featureDefinitions.projectionNodeConstructor);\n      /**\n       * Load Motion gesture and animation features. These are rendered as renderless\n       * components so each feature can optionally make use of React lifecycle methods.\n       */\n      features = useFeatures(props, context.visualElement, preloadedFeatures);\n    }\n    /**\n     * The mount order and hierarchy is specific to ensure our element ref\n     * is hydrated by the time features fire their effects.\n     */\n    return React.createElement(VisualElementHandler, {\n      visualElement: context.visualElement,\n      props: Object.assign(Object.assign({}, config), props)\n    }, features, React.createElement(MotionContext.Provider, {\n      value: context\n    }, useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, config.isStatic, context.visualElement)));\n  }\n  return forwardRef(MotionComponent);\n}\nfunction useLayoutId(_ref2) {\n  let {\n    layoutId\n  } = _ref2;\n  var _a;\n  const layoutGroupId = (_a = useContext(LayoutGroupContext)) === null || _a === void 0 ? void 0 : _a.id;\n  return layoutGroupId && layoutId !== undefined ? layoutGroupId + \"-\" + layoutId : layoutId;\n}\nexport { createMotionComponent };","map":{"version":3,"names":["React","forwardRef","useContext","useFeatures","MotionConfigContext","MotionContext","useVisualElement","useMotionRef","useCreateMotionContext","loadFeatures","featureDefinitions","isBrowser","useProjectionId","LayoutGroupContext","useProjection","VisualElementHandler","createMotionComponent","_ref","preloadedFeatures","createVisualElement","projectionNodeConstructor","useRender","useVisualState","Component","MotionComponent","props","externalRef","layoutId","useLayoutId","Object","assign","config","features","context","projectionId","isStatic","undefined","visualState","visualElement","createElement","Provider","value","_ref2","_a","layoutGroupId","id"],"sources":["/Users/stanly_s/Documents/yocia/node_modules/framer-motion/dist/es/motion/index.mjs"],"sourcesContent":["import * as React from 'react';\nimport { forwardRef, useContext } from 'react';\nimport { useFeatures } from './features/use-features.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures, featureDefinitions } from './features/definitions.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { useProjectionId } from '../projection/node/id.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { useProjection } from './features/use-projection.mjs';\nimport { VisualElementHandler } from './utils/VisualElementHandler.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({ preloadedFeatures, createVisualElement, projectionNodeConstructor, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        const layoutId = useLayoutId(props);\n        props = Object.assign(Object.assign({}, props), { layoutId });\n        /**\n         * If we're rendering in a static environment, we only visually update the component\n         * as a result of a React-rerender rather than interactions or animations. This\n         * means we don't need to load additional memory structures like VisualElement,\n         * or any gesture/animation features.\n         */\n        const config = useContext(MotionConfigContext);\n        let features = null;\n        const context = useCreateMotionContext(props);\n        /**\n         * Create a unique projection ID for this component. If a new component is added\n         * during a layout animation we'll use this to query the DOM and hydrate its ref early, allowing\n         * us to measure it as soon as any layout effect flushes pending layout animations.\n         *\n         * Performance note: It'd be better not to have to search the DOM for these elements.\n         * For newly-entering components it could be enough to only correct treeScale, in which\n         * case we could mount in a scale-correction mode. This wouldn't be enough for\n         * shared element transitions however. Perhaps for those we could revert to a root node\n         * that gets forceRendered and layout animations are triggered on its layout effect.\n         */\n        const projectionId = config.isStatic ? undefined : useProjectionId();\n        /**\n         *\n         */\n        const visualState = useVisualState(props, config.isStatic);\n        if (!config.isStatic && isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, Object.assign(Object.assign({}, config), props), createVisualElement);\n            useProjection(projectionId, props, context.visualElement, projectionNodeConstructor ||\n                featureDefinitions.projectionNodeConstructor);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */\n            features = useFeatures(props, context.visualElement, preloadedFeatures);\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (React.createElement(VisualElementHandler, { visualElement: context.visualElement, props: Object.assign(Object.assign({}, config), props) },\n            features,\n            React.createElement(MotionContext.Provider, { value: context }, useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, config.isStatic, context.visualElement))));\n    }\n    return forwardRef(MotionComponent);\n}\nfunction useLayoutId({ layoutId }) {\n    var _a;\n    const layoutGroupId = (_a = useContext(LayoutGroupContext)) === null || _a === void 0 ? void 0 : _a.id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\n\nexport { createMotionComponent };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}