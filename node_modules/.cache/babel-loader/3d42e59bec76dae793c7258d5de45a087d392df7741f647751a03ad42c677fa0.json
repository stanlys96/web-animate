{"ast":null,"code":"import { getAnimationData, getMotionValue } from './data.es.js';\nimport { isCssVar, registerCssVariable } from './utils/css-var.es.js';\nimport { Animation } from '@motionone/animation';\nimport { defaults, isEasingGenerator, isFunction, isEasingList, isNumber, time, noop } from '@motionone/utils';\nimport { isTransform, addTransformToElement, transformDefinitions } from './utils/transforms.es.js';\nimport { convertEasing } from './utils/easing.es.js';\nimport { supports } from './utils/feature-detection.es.js';\nimport { hydrateKeyframes, keyframesList } from './utils/keyframes.es.js';\nimport { style } from './style.es.js';\nimport { getStyleName } from './utils/get-style-name.es.js';\nimport { stopAnimation } from './utils/stop-animation.es.js';\nfunction getDevToolsRecord() {\n  return window.__MOTION_DEV_TOOLS_RECORD;\n}\nfunction animateStyle(element, key, keyframesDefinition) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const record = getDevToolsRecord();\n  const isRecording = options.record !== false && record;\n  let animation;\n  let {\n    duration = defaults.duration,\n    delay = defaults.delay,\n    endDelay = defaults.endDelay,\n    repeat = defaults.repeat,\n    easing = defaults.easing,\n    direction,\n    offset,\n    allowWebkitAcceleration = false\n  } = options;\n  const data = getAnimationData(element);\n  const valueIsTransform = isTransform(key);\n  let canAnimateNatively = supports.waapi();\n  /**\n   * If this is an individual transform, we need to map its\n   * key to a CSS variable and update the element's transform style\n   */\n  valueIsTransform && addTransformToElement(element, key);\n  const name = getStyleName(key);\n  const motionValue = getMotionValue(data.values, name);\n  /**\n   * Get definition of value, this will be used to convert numerical\n   * keyframes into the default value type.\n   */\n  const definition = transformDefinitions.get(name);\n  /**\n   * Stop the current animation, if any. Because this will trigger\n   * commitStyles (DOM writes) and we might later trigger DOM reads,\n   * this is fired now and we return a factory function to create\n   * the actual animation that can get called in batch,\n   */\n  stopAnimation(motionValue.animation, !(isEasingGenerator(easing) && motionValue.generator) && options.record !== false);\n  /**\n   * Batchable factory function containing all DOM reads.\n   */\n  return () => {\n    const readInitialValue = () => {\n      var _a, _b;\n      return (_b = (_a = style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0;\n    };\n    /**\n     * Replace null values with the previous keyframe value, or read\n     * it from the DOM if it's the first keyframe.\n     */\n    let keyframes = hydrateKeyframes(keyframesList(keyframesDefinition), readInitialValue);\n    if (isEasingGenerator(easing)) {\n      const custom = easing.createAnimation(keyframes, readInitialValue, valueIsTransform, name, motionValue);\n      easing = custom.easing;\n      if (custom.keyframes !== undefined) keyframes = custom.keyframes;\n      if (custom.duration !== undefined) duration = custom.duration;\n    }\n    /**\n     * If this is a CSS variable we need to register it with the browser\n     * before it can be animated natively. We also set it with setProperty\n     * rather than directly onto the element.style object.\n     */\n    if (isCssVar(name)) {\n      if (supports.cssRegisterProperty()) {\n        registerCssVariable(name);\n      } else {\n        canAnimateNatively = false;\n      }\n    }\n    /**\n     * If we've been passed a custom easing function, and this browser\n     * does **not** support linear() easing, and the value is a transform\n     * (and thus a pure number) we can still support the custom easing\n     * by falling back to the animation polyfill.\n     */\n    if (valueIsTransform && !supports.linearEasing() && (isFunction(easing) || isEasingList(easing) && easing.some(isFunction))) {\n      canAnimateNatively = false;\n    }\n    /**\n     * If we can animate this value with WAAPI, do so.\n     */\n    if (canAnimateNatively) {\n      /**\n       * Convert numbers to default value types. Currently this only supports\n       * transforms but it could also support other value types.\n       */\n      if (definition) {\n        keyframes = keyframes.map(value => isNumber(value) ? definition.toDefaultUnit(value) : value);\n      }\n      /**\n       * If this browser doesn't support partial/implicit keyframes we need to\n       * explicitly provide one.\n       */\n      if (keyframes.length === 1 && (!supports.partialKeyframes() || isRecording)) {\n        keyframes.unshift(readInitialValue());\n      }\n      const animationOptions = {\n        delay: time.ms(delay),\n        duration: time.ms(duration),\n        endDelay: time.ms(endDelay),\n        easing: !isEasingList(easing) ? convertEasing(easing, duration) : undefined,\n        direction,\n        iterations: repeat + 1,\n        fill: \"both\"\n      };\n      animation = element.animate({\n        [name]: keyframes,\n        offset,\n        easing: isEasingList(easing) ? easing.map(thisEasing => convertEasing(thisEasing, duration)) : undefined\n      }, animationOptions);\n      /**\n       * Polyfill finished Promise in browsers that don't support it\n       */\n      if (!animation.finished) {\n        animation.finished = new Promise((resolve, reject) => {\n          animation.onfinish = resolve;\n          animation.oncancel = reject;\n        });\n      }\n      const target = keyframes[keyframes.length - 1];\n      animation.finished.then(() => {\n        // Apply styles to target\n        style.set(element, name, target);\n        // Ensure fill modes don't persist\n        animation.cancel();\n      }).catch(noop);\n      /**\n       * This forces Webkit to run animations on the main thread by exploiting\n       * this condition:\n       * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\n       *\n       * This fixes Webkit's timing bugs, like accelerated animations falling\n       * out of sync with main thread animations and massive delays in starting\n       * accelerated animations in WKWebView.\n       */\n      if (!allowWebkitAcceleration) animation.playbackRate = 1.000001;\n      /**\n       * If we can't animate the value natively then we can fallback to the numbers-only\n       * polyfill for transforms.\n       */\n    } else if (valueIsTransform) {\n      /**\n       * If any keyframe is a string (because we measured it from the DOM), we need to convert\n       * it into a number before passing to the Animation polyfill.\n       */\n      keyframes = keyframes.map(value => typeof value === \"string\" ? parseFloat(value) : value);\n      /**\n       * If we only have a single keyframe, we need to create an initial keyframe by reading\n       * the current value from the DOM.\n       */\n      if (keyframes.length === 1) {\n        keyframes.unshift(parseFloat(readInitialValue()));\n      }\n      const render = latest => {\n        if (definition) latest = definition.toDefaultUnit(latest);\n        style.set(element, name, latest);\n      };\n      animation = new Animation(render, keyframes, Object.assign(Object.assign({}, options), {\n        duration,\n        easing\n      }));\n    } else {\n      const target = keyframes[keyframes.length - 1];\n      style.set(element, name, definition && isNumber(target) ? definition.toDefaultUnit(target) : target);\n    }\n    if (isRecording) {\n      record(element, key, keyframes, {\n        duration,\n        delay: delay,\n        easing,\n        repeat,\n        offset\n      }, \"motion-one\");\n    }\n    motionValue.setAnimation(animation);\n    return animation;\n  };\n}\nexport { animateStyle };","map":{"version":3,"names":["getAnimationData","getMotionValue","isCssVar","registerCssVariable","Animation","defaults","isEasingGenerator","isFunction","isEasingList","isNumber","time","noop","isTransform","addTransformToElement","transformDefinitions","convertEasing","supports","hydrateKeyframes","keyframesList","style","getStyleName","stopAnimation","getDevToolsRecord","window","__MOTION_DEV_TOOLS_RECORD","animateStyle","element","key","keyframesDefinition","options","arguments","length","undefined","record","isRecording","animation","duration","delay","endDelay","repeat","easing","direction","offset","allowWebkitAcceleration","data","valueIsTransform","canAnimateNatively","waapi","name","motionValue","values","definition","get","generator","readInitialValue","_a","_b","initialValue","keyframes","custom","createAnimation","cssRegisterProperty","linearEasing","some","map","value","toDefaultUnit","partialKeyframes","unshift","animationOptions","ms","iterations","fill","animate","thisEasing","finished","Promise","resolve","reject","onfinish","oncancel","target","then","set","cancel","catch","playbackRate","parseFloat","render","latest","Object","assign","setAnimation"],"sources":["/Users/stanly_s/Documents/yocia/node_modules/@motionone/dom/dist/animate/animate-style.es.js"],"sourcesContent":["import { getAnimationData, getMotionValue } from './data.es.js';\nimport { isCssVar, registerCssVariable } from './utils/css-var.es.js';\nimport { Animation } from '@motionone/animation';\nimport { defaults, isEasingGenerator, isFunction, isEasingList, isNumber, time, noop } from '@motionone/utils';\nimport { isTransform, addTransformToElement, transformDefinitions } from './utils/transforms.es.js';\nimport { convertEasing } from './utils/easing.es.js';\nimport { supports } from './utils/feature-detection.es.js';\nimport { hydrateKeyframes, keyframesList } from './utils/keyframes.es.js';\nimport { style } from './style.es.js';\nimport { getStyleName } from './utils/get-style-name.es.js';\nimport { stopAnimation } from './utils/stop-animation.es.js';\n\nfunction getDevToolsRecord() {\n    return window.__MOTION_DEV_TOOLS_RECORD;\n}\nfunction animateStyle(element, key, keyframesDefinition, options = {}) {\n    const record = getDevToolsRecord();\n    const isRecording = options.record !== false && record;\n    let animation;\n    let { duration = defaults.duration, delay = defaults.delay, endDelay = defaults.endDelay, repeat = defaults.repeat, easing = defaults.easing, direction, offset, allowWebkitAcceleration = false, } = options;\n    const data = getAnimationData(element);\n    const valueIsTransform = isTransform(key);\n    let canAnimateNatively = supports.waapi();\n    /**\n     * If this is an individual transform, we need to map its\n     * key to a CSS variable and update the element's transform style\n     */\n    valueIsTransform && addTransformToElement(element, key);\n    const name = getStyleName(key);\n    const motionValue = getMotionValue(data.values, name);\n    /**\n     * Get definition of value, this will be used to convert numerical\n     * keyframes into the default value type.\n     */\n    const definition = transformDefinitions.get(name);\n    /**\n     * Stop the current animation, if any. Because this will trigger\n     * commitStyles (DOM writes) and we might later trigger DOM reads,\n     * this is fired now and we return a factory function to create\n     * the actual animation that can get called in batch,\n     */\n    stopAnimation(motionValue.animation, !(isEasingGenerator(easing) && motionValue.generator) &&\n        options.record !== false);\n    /**\n     * Batchable factory function containing all DOM reads.\n     */\n    return () => {\n        const readInitialValue = () => { var _a, _b; return (_b = (_a = style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0; };\n        /**\n         * Replace null values with the previous keyframe value, or read\n         * it from the DOM if it's the first keyframe.\n         */\n        let keyframes = hydrateKeyframes(keyframesList(keyframesDefinition), readInitialValue);\n        if (isEasingGenerator(easing)) {\n            const custom = easing.createAnimation(keyframes, readInitialValue, valueIsTransform, name, motionValue);\n            easing = custom.easing;\n            if (custom.keyframes !== undefined)\n                keyframes = custom.keyframes;\n            if (custom.duration !== undefined)\n                duration = custom.duration;\n        }\n        /**\n         * If this is a CSS variable we need to register it with the browser\n         * before it can be animated natively. We also set it with setProperty\n         * rather than directly onto the element.style object.\n         */\n        if (isCssVar(name)) {\n            if (supports.cssRegisterProperty()) {\n                registerCssVariable(name);\n            }\n            else {\n                canAnimateNatively = false;\n            }\n        }\n        /**\n         * If we've been passed a custom easing function, and this browser\n         * does **not** support linear() easing, and the value is a transform\n         * (and thus a pure number) we can still support the custom easing\n         * by falling back to the animation polyfill.\n         */\n        if (valueIsTransform &&\n            !supports.linearEasing() &&\n            (isFunction(easing) || (isEasingList(easing) && easing.some(isFunction)))) {\n            canAnimateNatively = false;\n        }\n        /**\n         * If we can animate this value with WAAPI, do so.\n         */\n        if (canAnimateNatively) {\n            /**\n             * Convert numbers to default value types. Currently this only supports\n             * transforms but it could also support other value types.\n             */\n            if (definition) {\n                keyframes = keyframes.map((value) => isNumber(value) ? definition.toDefaultUnit(value) : value);\n            }\n            /**\n             * If this browser doesn't support partial/implicit keyframes we need to\n             * explicitly provide one.\n             */\n            if (keyframes.length === 1 &&\n                (!supports.partialKeyframes() || isRecording)) {\n                keyframes.unshift(readInitialValue());\n            }\n            const animationOptions = {\n                delay: time.ms(delay),\n                duration: time.ms(duration),\n                endDelay: time.ms(endDelay),\n                easing: !isEasingList(easing)\n                    ? convertEasing(easing, duration)\n                    : undefined,\n                direction,\n                iterations: repeat + 1,\n                fill: \"both\",\n            };\n            animation = element.animate({\n                [name]: keyframes,\n                offset,\n                easing: isEasingList(easing)\n                    ? easing.map((thisEasing) => convertEasing(thisEasing, duration))\n                    : undefined,\n            }, animationOptions);\n            /**\n             * Polyfill finished Promise in browsers that don't support it\n             */\n            if (!animation.finished) {\n                animation.finished = new Promise((resolve, reject) => {\n                    animation.onfinish = resolve;\n                    animation.oncancel = reject;\n                });\n            }\n            const target = keyframes[keyframes.length - 1];\n            animation.finished\n                .then(() => {\n                // Apply styles to target\n                style.set(element, name, target);\n                // Ensure fill modes don't persist\n                animation.cancel();\n            })\n                .catch(noop);\n            /**\n             * This forces Webkit to run animations on the main thread by exploiting\n             * this condition:\n             * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\n             *\n             * This fixes Webkit's timing bugs, like accelerated animations falling\n             * out of sync with main thread animations and massive delays in starting\n             * accelerated animations in WKWebView.\n             */\n            if (!allowWebkitAcceleration)\n                animation.playbackRate = 1.000001;\n            /**\n             * If we can't animate the value natively then we can fallback to the numbers-only\n             * polyfill for transforms.\n             */\n        }\n        else if (valueIsTransform) {\n            /**\n             * If any keyframe is a string (because we measured it from the DOM), we need to convert\n             * it into a number before passing to the Animation polyfill.\n             */\n            keyframes = keyframes.map((value) => typeof value === \"string\" ? parseFloat(value) : value);\n            /**\n             * If we only have a single keyframe, we need to create an initial keyframe by reading\n             * the current value from the DOM.\n             */\n            if (keyframes.length === 1) {\n                keyframes.unshift(parseFloat(readInitialValue()));\n            }\n            const render = (latest) => {\n                if (definition)\n                    latest = definition.toDefaultUnit(latest);\n                style.set(element, name, latest);\n            };\n            animation = new Animation(render, keyframes, Object.assign(Object.assign({}, options), { duration,\n                easing }));\n        }\n        else {\n            const target = keyframes[keyframes.length - 1];\n            style.set(element, name, definition && isNumber(target)\n                ? definition.toDefaultUnit(target)\n                : target);\n        }\n        if (isRecording) {\n            record(element, key, keyframes, {\n                duration,\n                delay: delay,\n                easing,\n                repeat,\n                offset,\n            }, \"motion-one\");\n        }\n        motionValue.setAnimation(animation);\n        return animation;\n    };\n}\n\nexport { animateStyle };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}