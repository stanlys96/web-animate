{"ast":null,"code":"import { useState, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { isBrowser } from './is-browser.mjs';\n\n// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = {\n  current: null\n};\nlet hasDetected = false;\nfunction initPrefersReducedMotion() {\n  hasDetected = true;\n  if (!isBrowser) return;\n  if (window.matchMedia) {\n    const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n    const setReducedMotionPreferences = () => prefersReducedMotion.current = motionMediaQuery.matches;\n    motionMediaQuery.addListener(setReducedMotionPreferences);\n    setReducedMotionPreferences();\n  } else {\n    prefersReducedMotion.current = false;\n  }\n}\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\nfunction useReducedMotion() {\n  /**\n   * Lazy initialisation of prefersReducedMotion\n   */\n  !hasDetected && initPrefersReducedMotion();\n  const [shouldReduceMotion] = useState(prefersReducedMotion.current);\n  /**\n   * TODO See if people miss automatically updating shouldReduceMotion setting\n   */\n  return shouldReduceMotion;\n}\nfunction useReducedMotionConfig() {\n  const reducedMotionPreference = useReducedMotion();\n  const {\n    reducedMotion\n  } = useContext(MotionConfigContext);\n  if (reducedMotion === \"never\") {\n    return false;\n  } else if (reducedMotion === \"always\") {\n    return true;\n  } else {\n    return reducedMotionPreference;\n  }\n}\nexport { useReducedMotion, useReducedMotionConfig };","map":{"version":3,"names":["useState","useContext","MotionConfigContext","isBrowser","prefersReducedMotion","current","hasDetected","initPrefersReducedMotion","window","matchMedia","motionMediaQuery","setReducedMotionPreferences","matches","addListener","useReducedMotion","shouldReduceMotion","useReducedMotionConfig","reducedMotionPreference","reducedMotion"],"sources":["/Users/stanly_s/Documents/yocia/node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs"],"sourcesContent":["import { useState, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { isBrowser } from './is-browser.mjs';\n\n// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nlet hasDetected = false;\nfunction initPrefersReducedMotion() {\n    hasDetected = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\nfunction useReducedMotion() {\n    /**\n     * Lazy initialisation of prefersReducedMotion\n     */\n    !hasDetected && initPrefersReducedMotion();\n    const [shouldReduceMotion] = useState(prefersReducedMotion.current);\n    /**\n     * TODO See if people miss automatically updating shouldReduceMotion setting\n     */\n    return shouldReduceMotion;\n}\nfunction useReducedMotionConfig() {\n    const reducedMotionPreference = useReducedMotion();\n    const { reducedMotion } = useContext(MotionConfigContext);\n    if (reducedMotion === \"never\") {\n        return false;\n    }\n    else if (reducedMotion === \"always\") {\n        return true;\n    }\n    else {\n        return reducedMotionPreference;\n    }\n}\n\nexport { useReducedMotion, useReducedMotionConfig };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC5C,SAASC,mBAAmB,QAAQ,oCAAoC;AACxE,SAASC,SAAS,QAAQ,kBAAkB;;AAE5C;AACA,MAAMC,oBAAoB,GAAG;EAAEC,OAAO,EAAE;AAAK,CAAC;AAC9C,IAAIC,WAAW,GAAG,KAAK;AACvB,SAASC,wBAAwBA,CAAA,EAAG;EAChCD,WAAW,GAAG,IAAI;EAClB,IAAI,CAACH,SAAS,EACV;EACJ,IAAIK,MAAM,CAACC,UAAU,EAAE;IACnB,MAAMC,gBAAgB,GAAGF,MAAM,CAACC,UAAU,CAAC,0BAA0B,CAAC;IACtE,MAAME,2BAA2B,GAAGA,CAAA,KAAOP,oBAAoB,CAACC,OAAO,GAAGK,gBAAgB,CAACE,OAAQ;IACnGF,gBAAgB,CAACG,WAAW,CAACF,2BAA2B,CAAC;IACzDA,2BAA2B,CAAC,CAAC;EACjC,CAAC,MACI;IACDP,oBAAoB,CAACC,OAAO,GAAG,KAAK;EACxC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,gBAAgBA,CAAA,EAAG;EACxB;AACJ;AACA;EACI,CAACR,WAAW,IAAIC,wBAAwB,CAAC,CAAC;EAC1C,MAAM,CAACQ,kBAAkB,CAAC,GAAGf,QAAQ,CAACI,oBAAoB,CAACC,OAAO,CAAC;EACnE;AACJ;AACA;EACI,OAAOU,kBAAkB;AAC7B;AACA,SAASC,sBAAsBA,CAAA,EAAG;EAC9B,MAAMC,uBAAuB,GAAGH,gBAAgB,CAAC,CAAC;EAClD,MAAM;IAAEI;EAAc,CAAC,GAAGjB,UAAU,CAACC,mBAAmB,CAAC;EACzD,IAAIgB,aAAa,KAAK,OAAO,EAAE;IAC3B,OAAO,KAAK;EAChB,CAAC,MACI,IAAIA,aAAa,KAAK,QAAQ,EAAE;IACjC,OAAO,IAAI;EACf,CAAC,MACI;IACD,OAAOD,uBAAuB;EAClC;AACJ;AAEA,SAASH,gBAAgB,EAAEE,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}