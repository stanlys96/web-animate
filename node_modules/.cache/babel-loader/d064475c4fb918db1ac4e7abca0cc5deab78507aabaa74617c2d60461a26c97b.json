{"ast":null,"code":"import { sortTransformProps } from './transform.mjs';\nconst translateAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\",\n  transformPerspective: \"perspective\"\n};\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(_ref, _ref2, transformIsDefault, transformTemplate) {\n  let {\n    transform,\n    transformKeys\n  } = _ref;\n  let {\n    enableHardwareAcceleration = true,\n    allowTransformNone = true\n  } = _ref2;\n  // The transform string we're going to build into.\n  let transformString = \"\";\n  // Transform keys into their default order - this will determine the output order.\n  transformKeys.sort(sortTransformProps);\n  // Track whether the defined transform has a defined z so we don't add a\n  // second to enable hardware acceleration\n  let transformHasZ = false;\n  // Loop over each transform and build them into transformString\n  const numTransformKeys = transformKeys.length;\n  for (let i = 0; i < numTransformKeys; i++) {\n    const key = transformKeys[i];\n    transformString += `${translateAlias[key] || key}(${transform[key]}) `;\n    if (key === \"z\") transformHasZ = true;\n  }\n  if (!transformHasZ && enableHardwareAcceleration) {\n    transformString += \"translateZ(0)\";\n  }\n  transformString = transformString.trim();\n  // If we have a custom `transform` template, pass our transform values and\n  // generated transformString to that before returning\n  if (transformTemplate) {\n    transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n  } else if (allowTransformNone && transformIsDefault) {\n    transformString = \"none\";\n  }\n  return transformString;\n}\n/**\n * Build a transformOrigin style. Uses the same defaults as the browser for\n * undefined origins.\n */\nfunction buildTransformOrigin(_ref3) {\n  let {\n    originX = \"50%\",\n    originY = \"50%\",\n    originZ = 0\n  } = _ref3;\n  return `${originX} ${originY} ${originZ}`;\n}\nexport { buildTransform, buildTransformOrigin };","map":{"version":3,"names":["sortTransformProps","translateAlias","x","y","z","transformPerspective","buildTransform","_ref","_ref2","transformIsDefault","transformTemplate","transform","transformKeys","enableHardwareAcceleration","allowTransformNone","transformString","sort","transformHasZ","numTransformKeys","length","i","key","trim","buildTransformOrigin","_ref3","originX","originY","originZ"],"sources":["/Users/stanly_s/Documents/yocia/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { sortTransformProps } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform({ transform, transformKeys }, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    // Transform keys into their default order - this will determine the output order.\n    transformKeys.sort(sortTransformProps);\n    // Track whether the defined transform has a defined z so we don't add a\n    // second to enable hardware acceleration\n    let transformHasZ = false;\n    // Loop over each transform and build them into transformString\n    const numTransformKeys = transformKeys.length;\n    for (let i = 0; i < numTransformKeys; i++) {\n        const key = transformKeys[i];\n        transformString += `${translateAlias[key] || key}(${transform[key]}) `;\n        if (key === \"z\")\n            transformHasZ = true;\n    }\n    if (!transformHasZ && enableHardwareAcceleration) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n/**\n * Build a transformOrigin style. Uses the same defaults as the browser for\n * undefined origins.\n */\nfunction buildTransformOrigin({ originX = \"50%\", originY = \"50%\", originZ = 0, }) {\n    return `${originX} ${originY} ${originZ}`;\n}\n\nexport { buildTransform, buildTransformOrigin };\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,iBAAiB;AAEpD,MAAMC,cAAc,GAAG;EACnBC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,YAAY;EACfC,oBAAoB,EAAE;AAC1B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAAAC,IAAA,EAAAC,KAAA,EAAkGC,kBAAkB,EAAEC,iBAAiB,EAAE;EAAA,IAAxI;IAAEC,SAAS;IAAEC;EAAc,CAAC,GAAAL,IAAA;EAAA,IAAE;IAAEM,0BAA0B,GAAG,IAAI;IAAEC,kBAAkB,GAAG;EAAM,CAAC,GAAAN,KAAA;EACnH;EACA,IAAIO,eAAe,GAAG,EAAE;EACxB;EACAH,aAAa,CAACI,IAAI,CAAChB,kBAAkB,CAAC;EACtC;EACA;EACA,IAAIiB,aAAa,GAAG,KAAK;EACzB;EACA,MAAMC,gBAAgB,GAAGN,aAAa,CAACO,MAAM;EAC7C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,gBAAgB,EAAEE,CAAC,EAAE,EAAE;IACvC,MAAMC,GAAG,GAAGT,aAAa,CAACQ,CAAC,CAAC;IAC5BL,eAAe,IAAI,GAAGd,cAAc,CAACoB,GAAG,CAAC,IAAIA,GAAG,IAAIV,SAAS,CAACU,GAAG,CAAC,IAAI;IACtE,IAAIA,GAAG,KAAK,GAAG,EACXJ,aAAa,GAAG,IAAI;EAC5B;EACA,IAAI,CAACA,aAAa,IAAIJ,0BAA0B,EAAE;IAC9CE,eAAe,IAAI,eAAe;EACtC;EACAA,eAAe,GAAGA,eAAe,CAACO,IAAI,CAAC,CAAC;EACxC;EACA;EACA,IAAIZ,iBAAiB,EAAE;IACnBK,eAAe,GAAGL,iBAAiB,CAACC,SAAS,EAAEF,kBAAkB,GAAG,EAAE,GAAGM,eAAe,CAAC;EAC7F,CAAC,MACI,IAAID,kBAAkB,IAAIL,kBAAkB,EAAE;IAC/CM,eAAe,GAAG,MAAM;EAC5B;EACA,OAAOA,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA,SAASQ,oBAAoBA,CAAAC,KAAA,EAAqD;EAAA,IAApD;IAAEC,OAAO,GAAG,KAAK;IAAEC,OAAO,GAAG,KAAK;IAAEC,OAAO,GAAG;EAAG,CAAC,GAAAH,KAAA;EAC5E,OAAO,GAAGC,OAAO,IAAIC,OAAO,IAAIC,OAAO,EAAE;AAC7C;AAEA,SAASrB,cAAc,EAAEiB,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}